# Setup
options(scipen=999)  # turn off scientific notation like 1e+06
library(ggplot2)
data("midwest", package = "ggplot2")  # load the data
# midwest <- read.csv("http://goo.gl/G1K41K") # alt source

# Init Ggplot
ggplot(midwest, aes(x=area, y = poptotal))

#scatter plot
ggplot(midwest, aes(x=area, y= poptotal))+ geom_point()
#Both stat_smooth() and geom_smooth() are identical 
#gam compress the data more than other methods
ggplot(midwest, aes(x= area, y= poptotal))+geom_point()+geom_smooth(method = "lm") 

# adjust the boundrias of the figure
ggplot(midwest, aes(x=area, y=poptotal))+
  geom_point()+
  geom_smooth(method = "lm")+
  xlim(c(0,.1))+
  ylim(c(0,1000000))
#coord_equal() reprents number of the same number of points in x axis compared to y axis 
#coord_fixed() represnts ratio between x axis and y axis
#coord_polar put the data in circles 
#coord_flip reverse the plot
#coord_trans 

#But how can I zoom in without removing points?
ggplot(midwest, aes(x=area,y=poptotal))+
  geom_point()+
  geom_smooth(method = "lm")+
  coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000))+
  labs(title = "The plot name",subtitle = "'the subtitle name", x = "Area", y = "Poptotal"  )


# but how can I change the size and color of points?

ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(col="black", size=1) +   # Set static color and size for points
  geom_smooth(method="lm", col="firebrick") +  # change the color of line
  coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) + 
  labs(title="Area Vs Population", subtitle="From midwest dataset", y="Population", x="Area", caption="Midwest Demographics")

#But how can you change the color of dots according to conditions

ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col = state), size=1) +   # Set static color and size for points
  geom_smooth(method="lm", col="firebrick") +  # change the color of line
  coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) + 
  labs(title="Area Vs Population", 
       subtitle="From midwest dataset",
       y="Population",
       x="Area", 
       caption="Midwest Demographics") +
  theme(legend.position = "None")+
  scale_color_brewer(palette = "Accent")
#what is the avaiable themes?
ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col = state), size=1) +   # Set static color and size for points
  geom_smooth(method="lm", col="firebrick") +  # change the color of line
  coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) + 
  labs(title="Area Vs Population", 
       subtitle="From midwest dataset",
       y="Population",
       x="Area", 
       caption="Midwest Demographics") +
theme_minimal()+
  scale_color_brewer(palette = "YlOrRd")

# What is the avaiable color paletter?
library(RColorBrewer)
#print
brewer.pal.info

# how can I change the x and y position?
# scale_x_binned() center the data in breaks
# scale_x_continuous argange the data according to main points

ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col = state), size=1) +   # Set static color and size for points
  geom_smooth(method="lm", col="firebrick") +  # change the color of line
  coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) + 
  labs(title="Area Vs Population", 
       subtitle="From midwest dataset",
       y="Population",
       x="Area", 
       caption="Midwest Demographics") +
  theme_minimal()+
  scale_color_brewer(palette = "YlOrRd")+
  scale_x_continuous()

#How can I customize this plot

ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) + 
  labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")

#---------------------------------------------------------------#
# element_text(): Since the title, subtitle and captions are textual items, element_text() function is used to set it.
# element_line(): Likewise element_line() is use to modify line based components such as the axis lines, major and minor grid lines, etc.
# element_rect(): Modifies rectangle components such as plot and panel background.
# element_blank(): Turns off displaying the theme item.

# ?theme is very urgent to know about the different paramets of theme
# How can I change the titles themes?
ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) + 
  labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")+
  scale_color_brewer(palette = "YlOrRd")+
  theme(plot.title=element_text(size=20, 
                                face="bold.italic", 
                                family="American Typewriter", #font-familyy
                                color="tomato",
                                hjust=.5,
                                lineheight=1.2),  # title
        plot.subtitle=element_text(size=15, 
                                   family="American Typewriter",
                                   face="bold",
                                   hjust=0.5),  # subtitle
        plot.caption=element_text(size=15),  # caption
        axis.title.x=element_text(vjust=10,  
                                  size=15),  # X axis title
        axis.title.y=element_text(size=15),  # Y axis title
        axis.text.x=element_text(size=10, 
                                 angle = 30,
                                 vjust=.5),  # X axis text
        axis.text.y=element_text(size=10))  # Y axis text
#------------------------------------------
# How to change the legend title?
# Base Plot
gg = ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) + 
  labs(title="Area Vs Population",
       y="Population",
       x="Area",
       caption="Source: midwest",
       col = "State",
       size = "Density")
         )

#_____________________________________________________________________________#

# how can I work on legends?
gg <- ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) + 
  labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")+
scale_color_manual(name="State", 
                   labels = c("Illinois", 
                              "Indiana", 
                              "Michigan", 
                              "Ohio", 
                              "Wisconsin"), 
                   values = c("IL"="blue", 
                              "IN"="red", 
                              "MI"="green", 
                              "OH"="brown", 
                              "WI"="orange")) +
  #how can I change the order of legends?
  guides(colour = guide_legend(order = 1),
         size = guide_legend((order = 2)))

# how can I remove  the legend?
gg + theme(legend.position="None") + labs(subtitle="No Legend")

#How can I change the location of the legend?
gg + theme(legend.position="left") + labs(subtitle="Legend on the Left")
# the last position can be in the "bottom"


# lhow can I make the legend at bottom-right, inside the plot --------------------
gg + theme(legend.title = element_text(size=12, color = "salmon", face="bold"),
           legend.justification=c(1,0), 
           legend.position=c(0.95, 0.05),  
           legend.background = element_blank(),
           legend.key = element_blank()) + 
  labs(subtitle="Legend: Bottom-Right Inside the Plot")

# how can I make the legend at top-left, inside the plot -------------------------
gg + theme(legend.title = element_text(size=12, color = "salmon", face="bold"),
           legend.justification=c(0,1), 
           legend.position=c(0.05, 0.95),
           legend.background = element_blank(),
           legend.key = element_blank()) + 
  labs(subtitle="Legend: Top-Left Inside the Plot")




#----------------------------------------------------------------#
# HOw can I work with the points inside the figure?
# Filter required rows.
midwest_sub <- midwest[midwest$poptotal > 300000, ]
midwest_sub$large_county <- ifelse(midwest_sub$poptotal > 300000, midwest_sub$county, "")

#se to display the confidence intervals around the smooth
# If I work with naming points it should be false
ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) + 
  labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")+
  geom_text(aes(label=large_county), size=2, data=midwest_sub)

# If I need to add rectangle around the tex
ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) + 
  labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")+
  geom_label(aes(label=large_county), size=2, data=midwest_sub, alpha=0.25)


#---------------------------------------#
# How can I reverse the x and y axis?
 # coord_flip()
  
  
  
  
  
  
  
  
###############################################################################
# Plots to identify the correlations
#1- Scatter plot
# To understand the nature of relationship between two variables (geom_point __ geom_smooth)
ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) + 
  geom_smooth(method="loess", se=F) + xlim(c(0, 0.1)) + ylim(c(0, 500000)) + 
  labs(title="Area Vs Population", y="Population", x="Area", caption="Source: midwest")+
  geom_label(aes(label=large_county), size=2, data=midwest_sub, alpha=0.5)

# How can I encirlce certain special group of points or region in the chart?
options(scipen = 999)
library(ggplot2)
library(ggalt)
# selecting a specific data
midwest_select <- midwest[midwest$poptotal > 350000 & 
                            midwest$poptotal <= 500000 & 
                            midwest$area > 0.01 & 
                            midwest$area < 0.1, ]

ggplot(midwest, aes(x=area, y=poptotal)) + 
  geom_point(aes(col=state, size=popdensity)) +   # draw points
  geom_smooth(method="loess", se=F) + 
  xlim(c(0, 0.1)) + 
  ylim(c(0, 500000)) +   # draw smoothing line
  geom_encircle(aes(x=area, y=poptotal), 
                data=midwest_select, 
                color="black", 
                size=2, 
                expand=0.08) 
#-------------------
# 2- Jitter plot and a comparment between scatter plot and jitter plot
# If The data has a largge number of points, the scatter plot will treat these points as a single point, So the jitther plot will avoid them.
#--- scatter plot
library(ggplot2)
data(mpg, package="ggplot2") # alternate source: "http://goo.gl/uEeRGu")
theme_set(theme_bw())  # pre-set the bw theme.

g <- ggplot(mpg, aes(cty, hwy))
dim(mpg)
#there are 234 dots
# Scatterplot
g + geom_point() + 
  geom_smooth(method="lm", se=F) +
  labs(subtitle="mpg: city vs highway mileage", 
       y="hwy", 
       x="cty", 
       title="Scatterplot with overlapping points", 
       caption="Source: midwest") 

g <- ggplot(mpg, aes(cty, hwy))
g + geom_jitter(width = .5, size=1) +
  labs(subtitle="mpg: city vs highway mileage", 
       y="hwy", 
       x="cty", 
       title="Jittered Points")+ geom_smooth(method = "lm")

#-----------------------
# New plot to overcome this challenge, while giving new advantage there is more points overlap, the size of the circle gets bigger 
g <- ggplot(mpg, aes(cty, hwy))
g + geom_count(col="tomato3", show.legend=F) +
  labs(subtitle="mpg: city vs highway mileage", 
       y="hwy", 
       x="cty", 
       title="Counts Plot")+geom_smooth(method = "lm")

# 4- bubble plot
#An animated bubble chart can be implemented using the gganimate package. It is same as the bubble chart, but, you have to show how the values change over a fifth dimension (typically time).
library(gganimate)
library(gapminder)

theme_set(theme_bw())  # pre-set the bw theme.

g <- ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, frame = year)) +
  geom_point() +
  geom_smooth(aes(group = year), 
              method = "lm", 
              show.legend = FALSE) +
  facet_wrap(~continent, scales = "free") +
  scale_x_log10()  # convert to log scale

gganimate(g, interval=0.2)


#----------------
#-Marginal Histogram / Boxplot
#If you want to show the relationship as well as the distribution in the same chart, use the marginal histogram.

library(ggExtra)
theme_set(theme_bw())  # pre-set the bw theme.
mpg_select <- mpg[mpg$hwy >= 35 & mpg$cty > 27, ]
g <- ggplot(mpg, aes(cty, hwy)) + 
  geom_count() + 
  geom_smooth(method="lm", se=F)

ggMarginal(g, type = "histogram", fill="transparent")
ggMarginal(g, type = "boxplot", fill="transparent")

# correlogram
library(ggcorrplot)
#Correlogram let’s you examine the corellation of multiple continuous variables present in the same dataframe.

# Correlation matrix
data(mtcars)
corr <- round(cor(mtcars), 1)
ggcorrplot(corr, hc.order = TRUE, 
           type = "lower", 
           lab = TRUE, 
           lab_size = 3, 
           method="circle", 
           colors = c("tomato2", "white", "springgreen3"), 
           title="Correlogram of mtcars", 
           ggtheme=theme_bw)




#--------------------------------------------------------------------------#
#Deviation
#Compare variation in values between small number of items (or categories) with respect to a fixed reference.
#Diverging bars
#Diverging Bars is a bar chart that can handle both negative and positive values.
data("mtcars")
mtcars$'car name' = row.names(mtcars)
mtcars$mpg_z <- round((mtcars$mpg - mean(mtcars$mpg))/sd(mtcars$mpg), 2)  # compute normalized mpg
mtcars$mpg_type <- ifelse(mtcars$mpg_z < 0, "below", "above")  # above / below avg flag
mtcars <- mtcars[order(mtcars$mpg_z), ]  # sort
mtcars$`car name` <- factor(mtcars$`car name`, levels = mtcars$`car name`)  # convert to factor to retain sorted order in plot.

# Diverging Barcharts
ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) + 
  geom_bar(stat='identity', aes(fill=mpg_type), width=.5)  +
  scale_fill_manual(name="Mileage", 
                    labels = c("Above Average", "Below Average"), 
                    values = c("above" = "red", "below" = "blue")) + 
  labs(subtitle="Normalised mileage from 'mtcars'", 
       title= "Diverging Bars") + 
  coord_flip()+   
  theme(axis.text.y =element_text(face = "bold")) # Y axis title


# Diverging Dot Plot
ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) + 
  geom_point(stat='identity', aes(col=mpg_type), size=6)  +
  scale_color_manual(name="Mileage", 
                     labels = c("Above Average", "Below Average"), 
                     values = c("above"="#00ba38", "below"="#f8766d")) + 
  geom_text(color="white", size=2) +
  labs(title="Diverging Dot Plot", 
       subtitle="Normalized mileage from 'mtcars': Dotplot") + 
  ylim(-2.5, 2.5) +
  coord_flip()


#--------------------------------------------------------------------
#Ranking
#Used to compare the position or performance of multiple items with respect to each other. 
#Ordered Bar Chart

# Prepare data: group mean city mileage by manufacturer.
cty_mpg <- aggregate(mpg$cty, by=list(mpg$manufacturer), FUN=mean)  # aggregate
colnames(cty_mpg) <- c("make", "mileage")  # change column names
cty_mpg <- cty_mpg[order(cty_mpg$mileage), ]  # sort
cty_mpg$make <- factor(cty_mpg$make, levels = cty_mpg$make)  # to retain the order in plot.
head(cty_mpg, 4)
ggplot(cty_mpg, aes(x=make, y=mileage)) + 
  geom_bar(stat="identity", width=.5, fill="tomato3") + 
  labs(title="Ordered Bar Chart", 
       subtitle="Make Vs Avg. Mileage", 
       caption="source: mpg") + 
  theme(axis.text.x = element_text(angle=65, vjust=0.6))

#Dotplot
library(ggplot2)
library(scales)
theme_set(theme_classic())

# Plot
ggplot(cty_mpg, aes(x=make, y=mileage)) + 
  geom_point(col="tomato2", size=3) +   # Draw points
  geom_segment(aes(x=make, 
                   xend=make, 
                   y=min(mileage), 
                   yend=max(mileage)), 
               linetype="dashed", 
               size=0.1) +   # Draw dashed lines
  labs(title="Dot Plot", 
       subtitle="Make Vs Avg. Mileage", 
       caption="source: mpg") +  
  coord_flip()



#-----------------------------------------------------------#
#distribution
#When you have lots and lots of data points and want to study where and how the data points are distributed.
#a1- Histogram

# Histogram on a Continuous (Numeric) Variable
g <- ggplot(mpg, aes(displ)) + scale_fill_brewer(palette = "Spectral")

g + geom_histogram(aes(fill=class), 
                   binwidth = .1, 
                   col="black", 
                   size=.1) +  # change binwidth
  labs(title="Histogram with Auto Binning", 
       subtitle="Engine Displacement across Vehicle Classes")  

# Histogram on a Categorical variable
g <- ggplot(mpg, aes(manufacturer))
g + geom_bar(aes(fill=class), width = 0.5) + 
  theme(axis.text.x = element_text(angle=65, vjust=0.6)) + 
  labs(title="Histogram on Categorical Variable", 
       subtitle="Manufacturer across Vehicle Classes") 



# 2- Box plot
# Plot
g <- ggplot(mpg, aes(class, cty))
g + geom_boxplot(varwidth=T, fill="plum") + 
  labs(title="Box plot", 
       subtitle="City Mileage grouped by Class of vehicle",
       caption="Source: mpg",
       x="Class of Vehicle",
       y="City Mileage")
#Dot + Box Plot
# plot
g <- ggplot(mpg, aes(manufacturer, cty))
g + geom_boxplot() + 
  geom_dotplot(binaxis='y', 
               stackdir='center', 
               dotsize = .5, 
               fill="red") +
  theme(axis.text.x = element_text(angle=65, vjust=0.6)) + 
  labs(title="Box plot + Dot plot", 
       subtitle="City Mileage vs Class: Each dot represents 1 row in source data",
       caption="Source: mpg",
       x="Class of Vehicle",
       y="City Mileage")

